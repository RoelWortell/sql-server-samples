# Build- en Release pipeline

# De *trigger* geeft aan waardoor deze pipeline automatisch uitgevoerd wordt. In dit geval: een *commit* tegen *master*
trigger:
- master

stages:
- stage: BuildStage

  jobs:
  - job: BuildJob

    # De *pool* geeft aan van wat voor VM-image gebruik gemaakt moet worden om deze pipeline uit te kunnen voeren. 
    pool:
      name: Azure Pipelines
      vmImage: windows-2019

    variables:
      BuildConfiguration: 'Release'

    # Hier volgende daadwerkelijke "build-stappen". In dit geval hebben we een "eenvoudige" build pipeline - later zullen we kijken naar pipelines met meerdere "stages".
    steps:
    ### De configuratie van een "task" hoef je niet te onthouden: er zitten visuele hulpmiddelen in Azure DevOps Pipelines ingebakken om *tasks* toe te voegen en de instellingen hiervoor te doen.
    - task: VSBuild@1
      displayName: 'Build Data Warehouse'
      inputs:
        solution: 'src/AdventureWorksDW/AdventureWorksDW.sqlproj'
        configuration: '$(BuildConfiguration)'

    - task: CopyFiles@2
      displayName: 'Copy Files to: $(Build.ArtifactStagingDirectory)'
      inputs:
        SourceFolder: '$(Build.SourcesDirectory)'
        Contents: '**/bin/$(BuildConfiguration)/**/*.dacpac'
        TargetFolder: '$(Build.ArtifactStagingDirectory)'
        flattenFolders: true

    # De Artifact is het resultaat van deze pipeline. Omdat we deze publiceren, kan een deployment-pipeline deze weer oppikken om "uit te rollen" naar andere omgevingen.
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)'
        artifact: 'SQLDW'
        publishLocation: 'pipeline'


- stage: DeployToDevStage
  jobs:
  - deployment: DeployToDev
    environment: Dev

    pool: Azure Pipelines

    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadPipelineArtifact@2
            inputs:
              buildType: 'current'
              artifactName: 'SQLDW'
              targetPath: '$(Pipeline.Workspace)'

          - task: SqlAzureDacpacDeployment@1
            inputs:
              azureSubscription: 'Azure ARM connection (Wortell Smart Learning)'
              AuthenticationType: 'server'
              ServerName: 'ci4bisqldbserver-dev.database.windows.net'
              DatabaseName: 'ci4bisqldbdw'
              SqlUsername: 'student01'
              SqlPassword: 'WortellSmartLearning.nl'
              deployType: 'DacpacTask'
              DeploymentAction: 'Publish'
              DacpacFile: '$(Pipeline.Workspace)/AdventureWorksDW.dacpac'
              IpDetectionMethod: 'AutoDetect'

- stage: DeployToTestStage
  jobs:
  - deployment: DeployToTest
    environment: Test

    pool: Azure Pipelines

    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadPipelineArtifact@2
            inputs:
              buildType: 'current'
              artifactName: 'SQLDW'
              targetPath: '$(Pipeline.Workspace)'

          - task: SqlAzureDacpacDeployment@1
            inputs:
              azureSubscription: 'Azure ARM connection (Wortell Smart Learning)'
              AuthenticationType: 'server'
              ServerName: 'ci4bisqldbserver.database.windows.net'
              DatabaseName: 'ci4bisqldbdw'
              SqlUsername: 'student01'
              SqlPassword: 'WortellSmartLearning.nl'
              deployType: 'DacpacTask'
              DeploymentAction: 'Publish'
              DacpacFile: '$(Pipeline.Workspace)/AdventureWorksDW.dacpac'
              IpDetectionMethod: 'AutoDetect'